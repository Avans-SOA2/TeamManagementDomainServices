// <auto-generated />
using System;
using Infrastructure.TMEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.TMEF.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20220916124422_TM_initial")]
    partial class TM_initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domain.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Los Angeles",
                            Number = 1111,
                            Street = "S. Figueroa St."
                        },
                        new
                        {
                            AddressId = 2,
                            City = "Indianapolis",
                            Number = 125,
                            Street = "South Pennsylvania Street"
                        });
                });

            modelBuilder.Entity("Core.Domain.CareTaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EMailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("HasCar")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("CareTakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HasCar = true,
                            Name = "F. Jacobse",
                            PhoneNumber = 0,
                            PlayerId = 1
                        },
                        new
                        {
                            Id = 2,
                            HasCar = false,
                            Name = "Ted van Es",
                            PhoneNumber = 0,
                            PlayerId = 2
                        },
                        new
                        {
                            Id = 3,
                            HasCar = true,
                            Name = "Hans van der Vaart",
                            PhoneNumber = 0,
                            PlayerId = 3
                        },
                        new
                        {
                            Id = 4,
                            HasCar = false,
                            Name = "Tjolk Hekking",
                            PhoneNumber = 0,
                            PlayerId = 4
                        },
                        new
                        {
                            Id = 5,
                            HasCar = true,
                            Name = "Remco Clavan",
                            PhoneNumber = 0,
                            PlayerId = 5
                        },
                        new
                        {
                            Id = 6,
                            HasCar = false,
                            Name = "Otto den Beste",
                            PhoneNumber = 0,
                            PlayerId = 6
                        },
                        new
                        {
                            Id = 7,
                            HasCar = true,
                            Name = "Edgar",
                            PhoneNumber = 0,
                            PlayerId = 7
                        },
                        new
                        {
                            Id = 8,
                            HasCar = false,
                            Name = "Jos",
                            PhoneNumber = 0,
                            PlayerId = 8
                        },
                        new
                        {
                            Id = 9,
                            HasCar = true,
                            Name = "Storm",
                            PhoneNumber = 0,
                            PlayerId = 9
                        });
                });

            modelBuilder.Entity("Core.Domain.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Louis van Gaal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ronald Koeman"
                        });
                });

            modelBuilder.Entity("Core.Domain.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHomeGame")
                        .HasColumnType("bit");

                    b.Property<int?>("LaundryDutyId")
                        .HasColumnType("int");

                    b.Property<int?>("OpponentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlayTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("LaundryDutyId");

                    b.HasIndex("OpponentId");

                    b.HasIndex("TeamId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Core.Domain.Opponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayingAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayingAddressId");

                    b.ToTable("Opponents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "LA Lakers",
                            PlayingAddressId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Indiana Pacers",
                            PlayingAddressId = 2
                        });
                });

            modelBuilder.Entity("Core.Domain.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Michael Jordan",
                            PlayerNumber = 23,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Scotty Pippen",
                            PlayerNumber = 33,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lebron James",
                            PlayerNumber = 1,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Johan Smarius",
                            PlayerNumber = 2,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Marcel de Groot",
                            PlayerNumber = 3,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pascal van Gastel",
                            PlayerNumber = 4,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Erco Argante",
                            PlayerNumber = 5,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ruud Hermans",
                            PlayerNumber = 6,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Arno Broeders",
                            PlayerNumber = 7,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Eefje Gijzen",
                            PlayerNumber = 8,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Dion Koeze",
                            PlayerNumber = 9,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Peter Gerards",
                            PlayerNumber = 10,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Ger Oosting",
                            PlayerNumber = 11,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Robin Schellius",
                            PlayerNumber = 12,
                            TeamId = 2
                        });
                });

            modelBuilder.Entity("Core.Domain.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamHeadCoachId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamHeadCoachId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chicago Bulls senioren",
                            TeamHeadCoachId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chicago Bulls junioren",
                            TeamHeadCoachId = 2
                        });
                });

            modelBuilder.Entity("GamePlayer", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<int>("PlayersId")
                        .HasColumnType("int");

                    b.HasKey("GamesId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("GamePlayer");
                });

            modelBuilder.Entity("Core.Domain.CareTaker", b =>
                {
                    b.HasOne("Core.Domain.Game", null)
                        .WithMany("Drivers")
                        .HasForeignKey("GameId");

                    b.HasOne("Core.Domain.Player", "Player")
                        .WithMany("CareTakers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Core.Domain.Game", b =>
                {
                    b.HasOne("Core.Domain.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("Core.Domain.CareTaker", "LaundryDuty")
                        .WithMany()
                        .HasForeignKey("LaundryDutyId");

                    b.HasOne("Core.Domain.Opponent", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId");

                    b.HasOne("Core.Domain.Team", "Team")
                        .WithMany("Games")
                        .HasForeignKey("TeamId");

                    b.Navigation("Coach");

                    b.Navigation("LaundryDuty");

                    b.Navigation("Opponent");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Core.Domain.Opponent", b =>
                {
                    b.HasOne("Core.Domain.Address", "PlayingAddress")
                        .WithMany()
                        .HasForeignKey("PlayingAddressId");

                    b.Navigation("PlayingAddress");
                });

            modelBuilder.Entity("Core.Domain.Player", b =>
                {
                    b.HasOne("Core.Domain.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Core.Domain.Team", b =>
                {
                    b.HasOne("Core.Domain.Coach", "TeamHeadCoach")
                        .WithMany()
                        .HasForeignKey("TeamHeadCoachId");

                    b.Navigation("TeamHeadCoach");
                });

            modelBuilder.Entity("GamePlayer", b =>
                {
                    b.HasOne("Core.Domain.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Game", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Core.Domain.Player", b =>
                {
                    b.Navigation("CareTakers");
                });

            modelBuilder.Entity("Core.Domain.Team", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
